[
    {
        "title": "$:/plugins/Gk0Wk/echarts/addons/TagCloud.ts",
        "text": "import type { IScriptAddon } from '../../scriptAddon';\n\nconst getPlatteColor = (name: string) =>\n  $tw.wiki.renderText(\n    'text/plain',\n    'text/vnd.tiddlywiki',\n    `<$transclude tiddler={{$:/palette}} index=\"${name}\"><$transclude tiddler=\"$:/palettes/Vanilla\" index=\"${name}\"><$transclude tiddler=\"$:/config/DefaultColourMappings/${name}\"/></$transclude></$transclude>`,\n    {},\n  );\nconst addon: IScriptAddon<any> = {\n  shouldUpdate: (_state, changedTiddlers) => {\n    return $tw.utils.count(changedTiddlers) > 0;\n  },\n  // See https://github.com/ecomfe/echarts-wordcloud\n  onUpdate: myChart => {\n    let previousDarkMode;\n    const colorCache = new Map();\n    const getColor = (tag: string) => {\n      if (!colorCache.get(tag)) {\n        const rgb = [];\n        for (let i = 0; i < 3; i++) {\n          rgb.push(\n            isDarkMode\n              ? 255 - Math.round(Math.random() * 160)\n              : Math.round(Math.random() * 160),\n          );\n        }\n        colorCache.set(tag, `rgb(${rgb.join(',')})`);\n      }\n      return colorCache.get(tag);\n    };\n    const tooltipFormatter = (tag: string) => {\n      const ul = $tw.utils.domMaker('ul', {});\n      const tiddlers = $tw.wiki.getTiddlersWithTag(tag);\n      const len = tiddlers.length;\n      for (let i = 0; i < len; i++) {\n        const tiddler = tiddlers[i];\n        const li = $tw.utils.domMaker('li', {});\n        const a = $tw.utils.domMaker('a', {\n          text: tiddler,\n          class:\n            'tc-tiddlylink tc-tiddlylink-resolves tc-popup-handle tc-popup-absolute',\n          style: {\n            cursor: 'pointer',\n          },\n        });\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        a.addEventListener('click', () =>\n          new $tw.Story().navigateTiddler(tiddler),\n        );\n        li.appendChild(a);\n        ul.appendChild(li);\n      }\n      return [ul];\n    };\n    let lastTag = '';\n    let cache: Element[] | string | undefined;\n    const cachedTooltipFormatter = ({\n      data: { name },\n    }: {\n      data: { name: string };\n    }) => {\n      if (name !== lastTag || !cache) {\n        cache = tooltipFormatter(name);\n        lastTag = name;\n      }\n      return cache;\n    };\n    const chartOptions = myChart.getOption();\n    const isDarkMode = (chartOptions as any).darkMode === true;\n    const filter =\n      (chartOptions as any).filter || '[tags[]!is[system]sort[title]]';\n    if (previousDarkMode !== isDarkMode) {\n      previousDarkMode = isDarkMode;\n      colorCache.clear();\n    }\n    const data = $tw.wiki.filterTiddlers(filter).map(tag => ({\n      name: tag,\n      value: Math.sqrt($tw.wiki.getTiddlersWithTag(tag).length),\n      textStyle: {\n        color: getColor(tag),\n      },\n    }));\n    myChart.setOption({\n      series: [\n        {\n          type: 'wordCloud',\n          gridSize: 4,\n          shape: 'pentagon',\n          data,\n          layoutAnimation: true,\n          textStyle: {\n            fontFamily: 'sans-serif',\n            fontWeight: 'bold',\n          },\n          emphasis: {\n            focus: 'self',\n            textStyle: {\n              textShadowBlur: 10,\n              textShadowColor: '#333',\n            },\n          },\n        },\n      ],\n      tooltip: {\n        position: 'top',\n        formatter: cachedTooltipFormatter,\n        triggerOn: 'mousemove|click',\n        enterable: true,\n        hideDelay: 800,\n        textStyle: {\n          color: 'inherit',\n          fontFamily: 'inherit',\n          fontSize: 'inherit',\n        },\n        backgroundColor: getPlatteColor('page-background'),\n        borderColor: getPlatteColor('very-muted-foreground'),\n      },\n    } as any);\n  },\n};\n\nexport default addon;\n",
        "Modern.TiddlyDev#IncludeSource": "true",
        "type": "application/javascript"
    }
]